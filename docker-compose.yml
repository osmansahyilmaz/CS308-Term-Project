version: '3.8'

services:
  # ðŸ”¹ Frontend Service (React)
  frontend:
    build: ./frontend
    container_name: react_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - app_network

  # ðŸ”¹ Backend Service (Node.js)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: node_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - DB_HOST=db
    volumes:
      - uploads_data:/app/uploads
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ðŸ”¹ PostgreSQL Database Service
  db:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G

  # ðŸ”¹ Redis Cache Service (for session management)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ðŸ”¹ Adminer (Database Management)
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
